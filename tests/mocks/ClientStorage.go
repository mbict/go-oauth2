// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import oauth2 "github.com/mbict/go-oauth2"

// ClientStorage is an autogenerated mock type for the ClientStorage type
type ClientStorage struct {
	mock.Mock
}

// AuthenticateClient provides a mock function with given fields: ctx, clientId, secret
func (_m *ClientStorage) AuthenticateClient(ctx context.Context, clientId string, secret string) (oauth2.Client, error) {
	ret := _m.Called(ctx, clientId, secret)

	var r0 oauth2.Client
	if rf, ok := ret.Get(0).(func(context.Context, string, string) oauth2.Client); ok {
		r0 = rf(ctx, clientId, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clientId, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields: ctx, clientId
func (_m *ClientStorage) GetClient(ctx context.Context, clientId string) (oauth2.Client, error) {
	ret := _m.Called(ctx, clientId)

	var r0 oauth2.Client
	if rf, ok := ret.Get(0).(func(context.Context, string) oauth2.Client); ok {
		r0 = rf(ctx, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
