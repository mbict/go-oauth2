// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import oauth2 "github.com/mbict/go-oauth2"

// AuthorizeCodeStorage is an autogenerated mock type for the AuthorizeCodeStorage type
type AuthorizeCodeStorage struct {
	mock.Mock
}

// CreateAuthorizeCodeSession provides a mock function with given fields: ctx, code, req
func (_m *AuthorizeCodeStorage) CreateAuthorizeCodeSession(ctx context.Context, code string, req oauth2.AuthorizeRequest) error {
	ret := _m.Called(ctx, code, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, oauth2.AuthorizeRequest) error); ok {
		r0 = rf(ctx, code, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuthorizeCodeSession provides a mock function with given fields: ctx, code
func (_m *AuthorizeCodeStorage) DeleteAuthorizeCodeSession(ctx context.Context, code string) (bool, error) {
	ret := _m.Called(ctx, code)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizeCodeSession provides a mock function with given fields: ctx, code
func (_m *AuthorizeCodeStorage) GetAuthorizeCodeSession(ctx context.Context, code string) (oauth2.Session, error) {
	ret := _m.Called(ctx, code)

	var r0 oauth2.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) oauth2.Session); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
