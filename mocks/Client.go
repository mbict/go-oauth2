// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import oauth2 "github.com/mbict/go-oauth2"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClientId provides a mock function with given fields:
func (_m *Client) ClientId() oauth2.ClientId {
	ret := _m.Called()

	var r0 oauth2.ClientId
	if rf, ok := ret.Get(0).(func() oauth2.ClientId); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(oauth2.ClientId)
	}

	return r0
}

// ClientSecret provides a mock function with given fields:
func (_m *Client) ClientSecret() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GrantTypes provides a mock function with given fields:
func (_m *Client) GrantTypes() oauth2.GrantTypes {
	ret := _m.Called()

	var r0 oauth2.GrantTypes
	if rf, ok := ret.Get(0).(func() oauth2.GrantTypes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.GrantTypes)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Client) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RedirectUri provides a mock function with given fields:
func (_m *Client) RedirectUri() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ResponseTypes provides a mock function with given fields:
func (_m *Client) ResponseTypes() oauth2.ResponseTypes {
	ret := _m.Called()

	var r0 oauth2.ResponseTypes
	if rf, ok := ret.Get(0).(func() oauth2.ResponseTypes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.ResponseTypes)
		}
	}

	return r0
}

// Scope provides a mock function with given fields:
func (_m *Client) Scope() oauth2.Scope {
	ret := _m.Called()

	var r0 oauth2.Scope
	if rf, ok := ret.Get(0).(func() oauth2.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.Scope)
		}
	}

	return r0
}
